##
#  Script to run the reference phylogeny tests. 
#
#  in: resFn, problems, projs, lock, measure, meth
Set(printgc=false):
WriteLock(lock, 'initializing computation');

prj := [seq(GetPKeyData(z),z=projs)]:
dataset := prj[-1,'ref'];

# load the project databases
nP := length(prj); dbs := CreateArray(1..nP):
for i to nP do dbs[i] := DB := ReadDb( prj[i,'fnBase'].'.db' ); od:

#Assigns ReconciledTrees (a table)
qualifier := If(testset='Ref', '', 'SemiAuto'):
ReadProgram(datdir.'ReconciledTrees'.qualifier.'_'.dataset.'.drw'); 
nrProb := length(problems);

ComputePerformance := proc(iSet, prjNrs:list)
    global DB;
    np := length(prjNrs):
    # false positive and true positive rates.
    #  - set to 0 to indicate no data
    #  - set to list [fpr, var(fpr)] once data is stored
    fpr  := CreateArray(1..nrProb,1..np,0);
    tpr  := CreateArray(1..nrProb,1..np,0);
    DUPL := {':D=Y','D=Y','D','DUPLICATION'}; SPEC := {':D=N','D=N','S','SPECIATION'};
    rawData := CreateArray(1..nrProb, 1..np,[]):
    Logger('start computing RefPhyloTest Performance...', 'DEBUG');
    for prNr to nrProb do 
        rels := ReconciledTrees[problems[prNr],'Relations']: 
        prts := intersect(iSet, ReconciledTrees[problems[prNr],'MappedProts']); 
        nProt := length(prts);
        if nProt>5 then 
	    t := (curP-1+prNr/(nrProb+1))/maxP;
            WriteLock(lock,sprintf('%.0f%% done. Estimated remaining time: %.0fsec\n', 100*t, (1-t)/t*time()));
            dups := table({}); specs := table({});
            for rel in Indices(rels) do 
                ev := rels[rel];
                if member(ev,DUPL) then dups[rel[1]] := append(dups[rel[1]], rel[2]);
                elif member(ev,SPEC) then specs[rel[1]] := append(specs[rel[1]], rel[2]);
                else warning('ignoring relation: '.string([rel, ev])); fi:
            od:
            
            # we iterate over all the projects
            for pNr to np do 
                DB := dbs[prjNrs[pNr]];
                # iteration over the proteins in iSet and current reconciled tree
                fp := tp := fn := tn := 1; #uniform prior probability

                raw := []:
                for oE1 in prts do
                    eNr1 := If(prj[prjNrs[pNr],'directMap'], oE1, DbEntryNrFromENr(oE1));
                    vps := ParseLongList(SearchTag('VP',Entry(eNr1)));
                    vps := {op(vps)} intersect prts;
                    
                    tpp := intersect(vps, specs[oE1]):
                    tp := tp + length( tpp )/2;
                    raw := append(raw, seq([oE1,If(z>oE1,z,NULL),'TP'],z=tpp) ):

                    tnp := minus(dups[oE1], vps):
                    tn := tn + length( tnp )/2;
                    raw := append(raw, seq([oE1,If(z>oE1,z,NULL),'TN'],z=tnp) ):

                    fpp := intersect(vps, dups[oE1]);
                    fp := fp + length( fpp )/2;
                    raw := append(raw, seq([oE1,If(z>oE1,z,NULL),'FP'],z=fpp) ):

                    fnp := minus(specs[oE1], vps):
                    fn := fn + length( fnp )/2;
                    raw := append(raw, seq([oE1,If(z>oE1,z,NULL),'FN'],z=fnp) ):
                od:
                # compute the ppv and tpr and their variances
                p := tp/(tp+fp); # positive predictive value
                fpr[prNr,pNr] := [p, p*(1-p)/(tp+fp)];
                p := tp/(tp+fn); 
                tpr[prNr,pNr] := [p, p*(1-p)/(tp+fn)];
                rawData[prNr, pNr] := raw;
            od:
        else 
            Logger( sprintf('[RefPhyloTest]: too few (%d) proteins in %a\n',nProt,problems[prNr]),'INFO');
        fi:
    od:
    return( [fpr, tpr, rawData] );
end:

StoreRawData := proc(rawData, PIDs, measure, problems, meth, testset)
    RawDataFn := CreateArray(1..length(PIDs)):
    for p to length(PIDs) do
        fn := sprintf('RefPhylo/%s.%a.tsv.gz', testset, hash_sha2([PIDs[p],problems,measure,meth]));
        OpenWriting(rawdir.fn[1..-4]);
        printf('# Dataset<tab>Protein ID 1<tab>Protein ID 2<tab>Correctness (TP:True '.
            'positive, FP: False positive, TN: True Negative. FN: False Negative)\n');
        for i to length(problems) do
            pNam := problems[i];
            for z in rawData[i,p] do
                id1 := ENr2XRef(z[1], dataset);
                id2 := ENr2XRef(z[2], dataset);
                printf('%s\t%s\t%s\t%s\n', pNam, id1, id2, z[3]);
            od:
        od:
        OpenWriting(previous);
        CallSystem('gzip -9f '.rawdir.fn[1..-4]);
        RawDataFn[p] := fn;
    od:
    return(RawDataFn);
end:

StoreResult := proc(fn:string, FPR, TPR, PIDs, measure, problems, meth ;
        'rawDataFn'=((RawDataFn=CreateArray(1..length(PIDs))):list) )
    OpenWriting(fn):
    printf('# created on %s\n', date());
    printf('FPR := %A:\nTPR := %A:\n', FPR, TPR):
    printf('RawDataFn := %A:\n', RawDataFn):
    printf('_LABEL_FPR := %A:\n', 'pos. predictive value rate'):
    printf('#PIDs := %A:\n', PIDs );
    printf('#problems: %A;\n#measure: %A:\n#meth := %A:\n', problems, measure, meth);
    OpenWriting(previous):
    CallSystem('gzip -9f '.fn);
end:

if meth='INTERSECT' or (length(meth)>6 and meth[1..6]='REFSET') then
    iSet  := GetProjISets(prj):
    prjNrs:= [seq(i,i=1..nP)];
    curP := 1; maxP := 1;
    Res := ComputePerformance(iSet, prjNrs):
    rawDataFn := StoreRawData( Res[3], [seq(prj[i,'PID'], i=prjNrs)], measure, problems, meth, testset);
    StoreResult(resFn, Res[1], Res[2], [seq(prj[i,'PID'], i=prjNrs)], measure, problems, meth, 'rawDataFn'=rawDataFn);
elif meth='PAIRWISE' then
    maxP := nP-1;
    Res := CreateArray(1..maxP):
    prjNrs := [seq([i,nP],i=1..maxP)];
    resFnBase := resFn[1..(SearchAllString('.',resFn)[-2])];
    for curP to maxP do
        curPrjPIDs := [seq(prj[j,'PID'],j=prjNrs[curP])]:
        resFnPart := sprintf('%s%a.drw', resFnBase, hash_sha2([curPrjPIDs,measure,problems,'INTERSECT']) );
        if FileExists(resFnPart.'.gz') then
            Res[curP] := 0; ReadProgram(resFnPart):  Res[curP] := [FPR, TPR];
        else
            iSet := GetProjISets( [seq(prj[j],j=prjNrs[curP])] ):
            Res[curP] := ComputePerformance(iSet, prjNrs[curP]):
            StoreResult(resFnPart, Res[curP,1], Res[curP,2], [seq(prj[j,'PID'], j=prjNrs[curP])], 
                        measure, problems, 'INTERSECT');
        fi:
    od:
    StoreResult(resFn, [seq(Res[i,1],i=1..maxP)], [seq(Res[i,2],i=1..maxP)], 
                [seq([prj[i,'PID'],prj[nP,'PID']],i=1..maxP)], measure, problems, meth);

else error('unknown strategy method:'.meth);
fi:



CallSystem('rm -f '.lock);
done;

