##
#  Script to run the species tree discordance test  
#
#  in: resFn, problem, projs, lock
Set(printgc=false):

WriteLock(lock, 'initialize Species Tree discordance test compuation');
CreateDayMatrices();

prj := [seq(GetPKeyData(z),z=projs)]:
dataset := prj[-1,'ref'];

ReadProgram(problem); # this loads the species tree and the bins containg species
nrBins := length(catBins);
catBinsNr := [seq({seq(GenomeNrFromCode(g,dataset),g=catBins[i])}, i=1..nrBins)];
# lookup table for a genome to which bin it belongs (if any)
orgNr2Bin := table(0);
for i to nrBins do for z in catBinsNr[i] do orgNr2Bin[z] := i; od od:

# load the project databases
nP := length(prj); dbs := CreateArray(1..nP):
for i to nP do dbs[i] := DB := ReadDb( prj[i,'fnBase'].'.db' ); od:

if not member(treebuilder, {'LSTree','BIONJ'}) then 
    error('unexpected treebuilder method: '.treebuilder);
fi:

# load index database
ddir := eval(symbol(lowercase(dataset).'DBpath'));
IndDB := ReadDb( ddir.'/ServerIndexed.db');
SeqDB := ReadDb( ddir.'/ServerSeqs.db');

FindCases := proc(iSet, prjNrs:list)
    global DB:
    cases := []; nP := length(prjNrs);
    NrOrthologs := CreateArray(1..nP):
    for rootGenome in catBins[1] do 
        ran := GenomeRange(rootGenome,dataset):
        for oE from ran[1] to ran[2] do
            if not member(oE, iSet) then next fi:
            
            assert( orgNr2Bin[GenomeNrFromENr(oE,dataset)]=1 );
            treeProt := CreateArray(1..nP): 
            # logical array if lineage is present in all projects
            miss := CreateArray(1..nrBins, 0);
            goOn := true;
            for i2pNr to nP do
                pNr := prjNrs[i2pNr];
                # get entry nr of project DB of protein having omaEntryNr oE
                DB := dbs[pNr];
                eNr := If( prj[pNr,'directMap'], oE, DbEntryNrFromENr(oE) );
                
                vps := ParseLongList(SearchTag('VP', Entry(eNr)));
                vpCat := CreateArray(1..nrBins,[]):
                for vp in vps do
                    if not member(vp,iSet) then next fi;
                    
                    bin := orgNr2Bin[ GenomeNrFromENr(vp,dataset) ]:
                    if bin>1 then 
                        vpCat[bin] := append(vpCat[bin], vp);
                        NrOrthologs[i2pNr] := NrOrthologs[i2pNr]+1;
                    fi:
                od:
                for i from 2 to nrBins do 
                    if length(vpCat[i])>0 then
                        vpCat[i] := vpCat[i, Rand(1..length(vpCat[i]))];
                    else 
                        miss[i] := 1;
                        vpCat[i] := 0;
                    fi:
                od:
                vpCat[1] := oE;
                treeProt[i2pNr] := vpCat;
    
                # check if we're still below the missing lineage limit, 
                # otherwise break the loop and go on with the next candidate 
                # protein.
                if sum(miss) > missThreshold then 
                    goOn := false; break;
                fi:
            od:
            
            # only keep the cases that have not too much missing lineages
            if goOn then 
                for i to nrBins do if miss[i]>0 then for j to nP do 
                    treeProt[j,i] := 0 od fi od:
                cases := append(cases, treeProt):
            fi: 
        od:
    od:
    
    if length(cases) > MAX_NR_TREES then
        cases := Shuffle(cases)[1..MAX_NR_TREES]:
    fi:
    Logger( sprintf('nr of cases: %d',length(cases)), 'INFO');
    return(cases, NrOrthologs):
end:

InferDistTree := proc(D, V, labs)
    if treebuilder='LSTree' then
        tree := LeastSquaresTree(D, V, labs);
    elif treebuilder='BIONJ' then
        treeRes := BioNJ(D, labs);
        tree := treeRes['Tree'];
    fi:
    return(tree);
end:

ComputeCongruenceStat := proc(prjNrs:list(posint), cases:list, totNrTrees:{0,posint})
    global DB, Ndone:
    RFstat := [seq( Stat(prj[i,'Title']), i=prjNrs)];
    IdentStat := [seq( Stat(prj[i,'Title']), i=prjNrs)];
    rawDat := CreateArray(1..length(prjNrs),[]):
    
    DB := SeqDB: 
    cErr := Counter('# errors in PhylogeneticTree');
    if not type(Ndone, integer) then Ndone:=0 fi:

    for cas in cases do
        for pNr to length(prjNrs) do
            seqs := labs := [];
            for i to nrBins do if cas[pNr,i]>0 then 
                seqs := append(seqs, Sequence(Entry(cas[pNr,i])));
                labs := append(labs, i);
            fi od:
            nseq := length(seqs):
            msa := traperror(MafftMSA(seqs)):
            if msa=lasterror then cErr+1; next fi:
            D := CreateArray(1..nseq,1..nseq):
            V := CreateArray(1..nseq,1..nseq):
            for i to nseq do for j from i+1 to nseq do
                 dps := EstimatePam(msa[AlignedSeqs,i],msa[AlignedSeqs,j],DMS):
                 D[i,j] := D[j,i] := dps[2];
                 V[i,j] := V[j,i] := dps[3];
            od od:
            genetree := traperror( InferDistTree(D,V,labs) ):
            if genetree=lasterror then cErr+1; next fi;
            
            pruned_st := PruneTree(copy(speciestree), labs);
            rfdist := RobinsonFoulds([genetree, pruned_st])[1,2];
            RFstat[pNr] + rfdist;
            IdentStat[pNr] + If(rfdist>0,1,0);
            for tree in [genetree, pruned_st] do for l in Leaves(tree) do
                l['Label'] := cas[pNr, l['Label']]:
            od od:
            rawDat[pNr] := append(rawDat[pNr], [genetree, pruned_st, rfdist]);
        od;
        
        Ndone := Ndone+1;
        t := Ndone/totNrTrees;
        msg := sprintf( 'Finished %d / %d (%.1f%%) trees in %.1f min. Estimated remaining time: %.1fmin\n', 
            Ndone, totNrTrees, 100*t, (time()-t0)/60, (1-t)/t*(time()-t0)/60 );
        WriteLock(lock,msg);
    od:
    Logger( sprintf('TreeTest result for %s:\n  %A\n  %A', 
        ConcatStrings([seq(prj[i,'Title'],i=prjNrs)],' - '), op(RFstat), cErr), 'INFO');
    return( [RFstat, rawDat, IdentStat] );
end:

StoreResult := proc(fn:string, RFstat, IdentStat, NrOrthologs, RawDataFn, PIDs)
    OpenWriting(fn):
    printf('RFstat := %A:\n', RFstat):
    printf('PIDs := %A:\n', PIDs );
    printf('RawDataFn := %A:\n', RawDataFn);
    printf('IdentStat := %A:\n', IdentStat);
    printf('NrOrthologs := %A:\n', NrOrthologs);
    printf('#problem := %A: treebuilder := %A:\n', problem, treebuilder);
    OpenWriting(previous):
    CallSystem('gzip -9f '.fn);
end:

StoreRawData := proc(fn:string, RawData, projects)
    OpenWriting(fn);
    printf('# Project <TAB> gene tree <TAB> species tree <TAB> RF distance\n');
    for pNr to length(projects) do 
        pName := projects[pNr,'Title'];
        for z in RawData[pNr] do
            for k to 2 do for l in Leaves(z[k]) do 
                oE := l['Label']; 
                if not type(oE,integer) then next fi:
                l['Label'] := ENr2XRef(oE, dataset); 
            od od:
            printf('%s\t%s\t%s\t%f\n', pName, Tree_Newick(z[1]), 
                Tree_Newick(z[2]), z[3]);
        od:
    od:
    OpenWriting(previous);
    CallSystem('gzip -9f '.fn);
end:

kingdom := SearchAllString('_',problem):
assert( length(kingdom) = 2 );
kingdom := problem[kingdom[1]+1..kingdom[2]-1];

if length(meth)>=6 and meth[1..6]='REFSET' then
    cases := CreateArray(1..nP,[]):
    RFstats := CreateArray(1..nP):
    IdentStats := CreateArray(1..nP):
    RawData := CreateArray(1..nP):
    NrOrthologList := CreateArray(1..nP):
    prjNrs := [seq(i,i=1..nP)];
    resFnParts := CreateArray(1..nP):
    resFnBase := resFn[1..(SearchAllString('.',resFn)[-2])];
    rawDataFn := CreateArray(1..nP):
    for i to nP do 
        hash_of_cur_proj := hash_sha2([prj[i,'PID'], meth, treebuilder]);
        resFnParts[i] := sprintf('%s%a.drw', resFnBase, hash_of_cur_proj );
        rawDataFn[i] := sprintf('TreeTest/%s.%a.tsv.gz', kingdom, hash_of_cur_proj);
        if FileExists(resFnParts[i].'.gz') then next fi:
        casesAndCnts := FindCases( intersect(), [i] );
        cases[i] := casesAndCnts[1]; NrOrthologList[i] := casesAndCnts[2,1];
    od:
    t0 := time();
    totNrTrees := sum(length(z),z=cases):
    for i to nP do
        if FileExists(resFnParts[i].'.gz') then
            RFstat := RawDataFn := IdentStat := NrOrthologs := 0;
            ReadProgram(resFnParts[i]): 
            assert(type(RFstat,Stat)); 
            assert(type(IdentStat,Stat)); 
            assert(type(RawDataFn,string));
            RFstats[i] := RFstat;
            IdentStats[i] := IdentStat;
            rawDataFn[i] := RawDataFn;
            NrOrthologList[i] := NrOrthologs;
        else
            compRes := ComputeCongruenceStat([prjNrs[i]], cases[i], 
                totNrTrees):
            # compRes[1]: RFstat ; compRes[2]: raw data to be stored away
            RFstats[i] := compRes[1,1]; rawdata := compRes[2,1]; IdentStats[i] := compRes[3,1];
            StoreRawData(rawdir.rawDataFn[i,1..-4], [rawdata], [prj[i]]);
            StoreResult(resFnParts[i], RFstats[i], IdentStats[i], NrOrthologList[i], rawDataFn[i], 
                [prj[i,'PID']]);
        fi:
    od:
    StoreResult(resFn, RFstats, IdentStats, NrOrthologList, rawDataFn, [seq(prj[i,'PID'],i=1..nP)]);
else error('unknown strategy method:'.meth); 
fi:

CallSystem('rm -f '.lock);
done;

