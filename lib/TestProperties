TestProperty := proc(Name:string, Evaluator:procedure, Args:list, YoungerThan:nonnegative)
    noeval(procname(args));
end:
CompleteClass(TestProperty);


EvaluateTreeTestProperty := proc(p_:{PKeyData,list(PKeyData)}, prop:TestProperty)
    global catBins; 
    pKeys := If( type(p_,PKeyData),[p_],p_ ); 
    dataset := pKeys[1,'ref']:

    ReadProgram(sprintf('%s/%s_%s.drw', datdir, prop[Args,1], dataset)); 
  
    orgs := intersect():  
    for pKey in pKeys do orgs := intersect(orgs, pKey['OrgsCovered']) od: 
    if orgs=intersect() then return(true) fi: 
     
    cat := CreateArray(1..length(catBins)): 
    for i to length(catBins) do  
        cat[i] := length(intersect(catBins[i], orgs)):  
    od: 
     
    return( sum(If(z=0,1,0),z=cat) <= prop['Args',2] );
end:

EvaluateRefPhyloTestProperty := proc(p:{PKeyData,list(PKeyData)}, prop:TestProperty)
    return(true);
end:


AddTestProperty := proc(Name:string, Evaluator:procedure, Args:list; ValidAfter:nonnegative)
    global TESTPROPERTIES:
    
    verb := Set(quiet=true);
    valid := If(assigned(ValidAfter),ValidAfter,UTCTime());
    p := TestProperty(Name,Evaluator,Args,valid);
    print(p);

    OpenAppending(datdir.'testProperties.drw');
    printf('TESTPROPERTIES[%A] := %A:\n', Name, p);
    OpenAppending(previous);
    Set(quiet=verb);

    ReadProgram(datdir.'testProperties.drw');
end:

GetTestProperty := proc(Name:string)
    global TESTPROPERTIES:
    if not assigned(TESTPROPERTIES) then ReadProgram(datdir.'testProperties.drw') fi:

    p := TESTPROPERTIES[Name];
    if p=0 then error('TestProperty '.Name.' is unknown'); fi:
    
    return(p);
end:

